
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<!-- saved from url=(0014)about:internet -->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Developers Guide</title>
<meta name="GENERATOR" content="WinCHM">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<style>
html,body { 
	/* Default Font */
	font-family: Arial, Helvetica, sans-serif;
	font-size: 11pt;
}
</style>




<style type="text/css">

#winchm_template_navigation{
	PADDING-RIGHT: 2px; 
	PADDING-LEFT: 2px; 
	FONT-SIZE: 11px; 
	PADDING-BOTTOM: 2px; 
	MARGIN: 0px; 
	PADDING-TOP: 2px; 
	FONT-FAMILY: Verdana;
}

#winchm_template_title{
	PADDING-RIGHT: 2px; 
	PADDING-LEFT: 2px; 
	FONT-WEIGHT: bold; 
	FONT-SIZE: 14px; 
	PADDING-BOTTOM: 2px; 
	MARGIN: 0px; 
	PADDING-TOP: 2px; 
	FONT-FAMILY: Verdana;
}


</style>
</head>

<body topMargin=0 marginheight="0" marginwidth="10"><script language="JavaScript" type="text/JavaScript">
function syn(){
if(parent.nav.tree){
 if(parent.nav.tree.loaded){
  parent.nav.tree.selectNode(20);
 }else{
  setTimeout("syn()",500);
}
  }else{
  setTimeout("syn()",500);
  }}
if(parent!=self){
  setTimeout("syn()",100);
}else{
  parent.location.href = "../index.htm?page=Developers_Guide.htm";
}
originalOnload = window.onload;
if(originalOnload==null){
window.onload = function(){parent.contentLoaded = true;};
}else{
window.onload = function(){originalOnload();parent.contentLoaded = true;};
}
</script> 

<TABLE style="WIDTH: 100%; HEIGHT: 50px" cellSpacing=0 cellPadding=0 width="100%" border=0>
  
  <TR>
    <TD>
      <DIV id=winchm_template_navigation><EM><FONT color=#800000>WinCHM 
      Help &gt; </FONT> 
        </EM> </DIV>
      <DIV id=winchm_template_title><FONT color=#000080>Developers Guide</FONT></DIV></TD>
    <TD align=right width=50><A href="Infrastructure.htm" title="Previous"><img id="winchm_template_prev" alt="Previous" src="template1/btn_prev_n.gif" border="0"></a>&nbsp;<A href="model_serving.htm" title="Next"><img id="winchm_template_next" alt="Next" src="template1/btn_next_n.gif" border="0"></a></TD></TR></TABLE>   

<HR>
<BR>
<P><EM>install docker:<BR>&nbsp;&nbsp;&nbsp; sudo apt 
update<BR>&nbsp;&nbsp;&nbsp; sudo apt install apt-transport-https 
ca-certificates curl software-properties-common<BR>&nbsp;&nbsp;&nbsp; curl -fsSL 
<A 
href="https://download.docker.com/linux/ubuntu/gpg">https://download.docker.com/linux/ubuntu/gpg</A> 
| sudo gpg --dearmor -o 
/usr/share/keyrings/docker-archive-keyring.gpg<BR>&nbsp;&nbsp;&nbsp; echo "deb 
[arch=$(dpkg --print-architecture) 
signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] <A 
href="https://download.docker.com/linux/ubuntu">https://download.docker.com/linux/ubuntu</A> 
$(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list &gt; 
/dev/null<BR>&nbsp;&nbsp;&nbsp; sudo apt update<BR>&nbsp;&nbsp;&nbsp; apt-cache 
policy docker-ce<BR>&nbsp;&nbsp;&nbsp; sudo apt install 
docker-ce<BR>&nbsp;&nbsp;&nbsp; sudo systemctl status docker</EM></P>
<P><EM>install docker compose:<BR>&nbsp;&nbsp;&nbsp; mkdir -p 
~/.docker/cli-plugins/<BR>&nbsp;&nbsp;&nbsp; curl -SL <A 
href="https://github.com/docker/compose/releases/download/v2.3.3/docker-compose-linux-x86_64">https://github.com/docker/compose/releases/download/v2.3.3/docker-compose-linux-x86_64</A> 
-o ~/.docker/cli-plugins/docker-compose<BR>&nbsp;&nbsp;&nbsp; chmod +x 
~/.docker/cli-plugins/docker-compose<BR>&nbsp;&nbsp;&nbsp; docker compose 
version</EM></P>
<P><EM>git clone:</EM></P>
<BLOCKQUOTE style="MARGIN-RIGHT: 0px" dir=ltr>
  <P>sudo apt update<BR>sudo apt install git</P>
  <P><EM>git clone <A 
  href="https://github.com/DevelopmentDigitalTwin/caldexML.git">https://github.com/DevelopmentDigitalTwin/caldexML.git</A></EM></P>
  <P><EM>(you need&nbsp;a credential)</EM></P></BLOCKQUOTE>
  <H2 dir=ltr>Run manually</H2>
<P dir=ltr><EM>got to path/caldexML/tracking folder:</EM></P>
<BLOCKQUOTE style="MARGIN-RIGHT: 0px" dir=ltr>
  <P dir=ltr>docker compose --env-file .env up -d</P></BLOCKQUOTE>
<P dir=ltr><EM>got to path/caldexML/streaming folder:</EM></P>
<BLOCKQUOTE style="MARGIN-RIGHT: 0px" dir=ltr>
  <P dir=ltr>docker compose --env-file .env up -d</P></BLOCKQUOTE>
<P dir=ltr><EM>got to path/caldexML/scheduling folder:</EM></P>
<BLOCKQUOTE style="MARGIN-RIGHT: 0px" dir=ltr>
  <P dir=ltr>docker compose --env-file .env up -d</P></BLOCKQUOTE>
<P dir=ltr><EM>got to path/caldexML/serving folder:</EM></P>
<BLOCKQUOTE style="MARGIN-RIGHT: 0px" dir=ltr>
  <P dir=ltr>docker compose --env-file .env up -d</P>
  <P dir=ltr>     &nbsp;</P></BLOCKQUOTE>
<H2 data-start="1840" data-end="1898"><STRONG data-start="1843" 
data-end="1898">Use a Single Script to Start All Projects</STRONG></H2>
<P data-start="1899" data-end="1978">If you prefer <STRONG data-start="1913" 
data-end="1949">one script to start all projects</STRONG>, you can use a shell 
script.</P>
<OL data-start="1980" data-end="2929">
  <LI data-start="1980" data-end="2070">
  <P data-start="1983" data-end="1999">Create a script:</P><PRE class="overflow-visible!" data-start="2003" data-end="2070"><DIV class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary"><DIV class="overflow-y-auto p-4" dir=ltr><CODE class="whitespace-pre! language-bash"><SPAN><SPAN>sudo nano /usr/local/bin/start-docker-ml-engine.sh
</SPAN></SPAN></CODE></DIV></DIV></PRE>
  <LI data-start="2071" data-end="2243">
  <P data-start="2074" data-end="2078">Add:</P><PRE class="overflow-visible!" data-start="2082" data-end="2243"><DIV class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary"><DIV class="overflow-y-auto p-4" dir=ltr><CODE class="whitespace-pre! language-bash"><SPAN><SPAN><SPAN class=hljs-meta>#!/bin/bash</SPAN></SPAN><SPAN>
<EM>path/caldexML/tracking</EM>/docker compose --env-file .env up -d docker compose -f
<EM>path/caldexML/streaming</EM>
      
     
/docker compose --env-file .env up -d</SPAN></SPAN></CODE><CODE class="whitespace-pre! language-bash"><SPAN><SPAN> docker compose -f    
<EM>path/caldexML/scheduling</EM>/docker compose --env-file .env up -d docker compose -f
<EM> path/caldexML/serving</EM>     
        
/docker compose --env-file     
.env up -d docker compose -f

</SPAN></SPAN></CODE></DIV></DIV></PRE>
  <LI data-start="2244" data-end="2341">
  <P data-start="2247" data-end="2266">Make it executable:</P><PRE class="overflow-visible!" data-start="2270" data-end="2341"><DIV class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary"><DIV class="overflow-y-auto p-4" dir=ltr><CODE class="whitespace-pre! language-bash"><SPAN><SPAN>sudo </SPAN><SPAN><SPAN class=hljs-built_in>chmod</SPAN></SPAN><SPAN> +x /usr/local/bin/start-docker-ml-engine.sh
</SPAN></SPAN></CODE></DIV></DIV></PRE>
  <LI data-start="2342" data-end="2765">
  <P data-start="2345" data-end="2372">Create a <CODE data-start="2354" 
  data-end="2363">systemd</CODE> service:</P><PRE class="overflow-visible!" data-start="2376" data-end="2452"><DIV class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary"><DIV class="overflow-y-auto p-4" dir=ltr><CODE class="whitespace-pre! language-bash"><SPAN><SPAN>sudo nano /etc/systemd/system/docker-compose-multi.service
</SPAN></SPAN></CODE></DIV></DIV></PRE>
  <P data-start="2456" data-end="2460">Add:</P><PRE class="overflow-visible!" data-start="2464" data-end="2765"><DIV class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary"><DIV class="overflow-y-auto p-4" dir=ltr><CODE class="whitespace-pre! language-ini"><SPAN><SPAN><SPAN class=hljs-section>[Unit]</SPAN></SPAN><SPAN>
</SPAN><SPAN><SPAN class=hljs-attr>Description</SPAN></SPAN><SPAN>=Start Multiple Docker Compose Projects
</SPAN><SPAN><SPAN class=hljs-attr>After</SPAN></SPAN><SPAN>=network.target docker.service
</SPAN><SPAN><SPAN class=hljs-attr>Requires</SPAN></SPAN><SPAN>=docker.service

</SPAN><SPAN><SPAN class=hljs-section>[Service]</SPAN></SPAN><SPAN>
</SPAN><SPAN><SPAN class=hljs-attr>ExecStart</SPAN></SPAN><SPAN>=/usr/local/bin/start-docker-ml-engine.sh
</SPAN><SPAN><SPAN class=hljs-attr>Restart</SPAN></SPAN><SPAN>=always
</SPAN><SPAN><SPAN class=hljs-attr>User</SPAN></SPAN><SPAN>=user
</SPAN><SPAN><SPAN class=hljs-attr>Group</SPAN></SPAN><SPAN>=docker

</SPAN><SPAN><SPAN class=hljs-section>[Install]</SPAN></SPAN><SPAN>
</SPAN><SPAN><SPAN class=hljs-attr>WantedBy</SPAN></SPAN><SPAN>=multi-user.target
</SPAN></SPAN></CODE></DIV></DIV></PRE>
  <LI data-start="2766" data-end="2929">
  <P data-start="2769" data-end="2788">Enable the service:</P><PRE class="overflow-visible!" data-start="2792" data-end="2929"><DIV class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary"><DIV class="overflow-y-auto p-4" dir=ltr><CODE class="whitespace-pre! language-bash"><SPAN><SPAN>sudo systemctl daemon-reload
sudo systemctl </SPAN><SPAN><SPAN class=hljs-built_in>enable</SPAN></SPAN><SPAN> docker-compose-multi
sudo systemctl start docker-compose-multi
</SPAN></SPAN></CODE></DIV></DIV></PRE></LI></OL> <BR><BR>

<HR>

<P></FONT></P>
<P align=right><A href="Infrastructure.htm" title="Previous"><img id="winchm_template_prev" alt="Previous" src="template1/btn_prev_n.gif" border="0"></a>&nbsp;<A href="model_serving.htm" title="Next"><img id="winchm_template_next" alt="Next" src="template1/btn_next_n.gif" border="0"></a></P>
</body>
</html>
